{"ast":null,"code":"// frontend/src/services/api.js\nimport axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3000/api';\nconst API_AI_URL = 'http://0.0.0.0:5021/api/face-recognition';\n\n// Fonction pour comparer une image avec celle d'un client\nexport const compareImages = async (uploadedImage, clientImageUrl) => {\n  try {\n    // Convertir l'URL de l'image client en fichier\n    const clientImageResponse = await fetch(clientImageUrl);\n    const clientImageBlob = await clientImageResponse.blob();\n    const clientImageFile = new File([clientImageBlob], 'clientImage.jpg', {\n      type: 'image/jpeg'\n    });\n    const formData = new FormData();\n    formData.append('image1', uploadedImage);\n    formData.append('image2', clientImageFile);\n    const response = await axios.post(API_AI_URL, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Erreur lors de la comparaison:', error);\n    throw new Error('Erreur lors de la comparaison des images');\n  }\n};\n\n// Fonction pour rechercher les clients similaires\nexport const searchClientsByFace = async (uploadedImage, clients) => {\n  try {\n    const similarClients = [];\n    console.log(\"Début de la recherche faciale...\");\n\n    // Parcourir tous les clients et comparer leurs images\n    for (const client of clients) {\n      if (client.imageFace) {\n        try {\n          const {\n            similarity,\n            is_similar\n          } = await compareImages(uploadedImage, client.imageFace);\n          console.log(`Client ${client.UBI}:`, {\n            similarity,\n            is_similar\n          });\n\n          // N'ajouter le client que si is_similar est true\n          if (is_similar === true) {\n            // Comparaison stricte\n            similarClients.push({\n              ...client,\n              similarity: similarity\n            });\n            console.log(`Client ${client.UBI} ajouté avec similarité:`, similarity);\n          } else {\n            console.log(`Client ${client.UBI} non ajouté car non similaire`);\n          }\n        } catch (error) {\n          console.error(`Erreur lors de la comparaison avec le client ${client.UBI}:`, error);\n          continue;\n        }\n      }\n    }\n    console.log(\"Clients similaires trouvés:\", similarClients.length);\n\n    // Trier les clients par score de similarité décroissant\n    return similarClients.sort((a, b) => b.similarity - a.similarity);\n  } catch (error) {\n    console.error(\"Erreur globale lors de la recherche:\", error);\n    throw new Error('Erreur lors de la recherche des clients similaires');\n  }\n};\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Intercepteur pour ajouter le token aux requêtes\napi.interceptors.request.use(config => {\n  const user = JSON.parse(localStorage.getItem('user'));\n  if (user !== null && user !== void 0 && user.token) {\n    config.headers.Authorization = `Bearer ${user.token}`;\n  }\n  return config;\n});\n\n// Fonctions d'authentification\nexport const login = async credentials => {\n  try {\n    const response = await api.post('/auth/login', credentials);\n    return response.data;\n  } catch (error) {\n    var _error$response, _error$response$data;\n    throw new Error(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || 'Erreur de connexion');\n  }\n};\n\n// Fonctions de gestion des clients\nexport const getAllClients = async () => {\n  try {\n    const response = await api.get('/clients/all');\n    return response.data;\n  } catch (error) {\n    var _error$response2, _error$response2$data;\n    throw new Error(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.error) || 'Erreur lors de la récupération des clients');\n  }\n};\nexport const getClient = async ubi => {\n  try {\n    const response = await api.get(`/clients/${ubi}`);\n    return response.data;\n  } catch (error) {\n    var _error$response3, _error$response3$data;\n    throw new Error(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.error) || 'Erreur lors de la récupération du client');\n  }\n};\nexport const getActiveClients = async () => {\n  try {\n    const response = await api.get('/clients/active');\n    return response.data;\n  } catch (error) {\n    var _error$response4, _error$response4$data;\n    throw new Error(((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.error) || 'Erreur lors de la récupération des clients actifs');\n  }\n};\nconst wait = ms => new Promise(resolve => setTimeout(resolve, ms));\n\n// export const createClient = async (clientData) => {\n//     try {\n//         const response = await api.post('/clients/create', clientData);\n\n//         // Si la réponse contient des similitudes\n//         if (response.data && response.data.similitude === true) {\n//             return {\n//                 similitude: true,\n//                 potentialClient: response.data.potentialClient,\n//                 similarClients: response.data.similarClients\n//             };\n//         }\n\n//         // Si pas de similitudes, retourner le client créé\n//         return response.data;\n\n//     } catch (error) {\n//         // Si l'erreur contient des informations de similitude\n//         if (error.response?.data?.similitude) {\n//             return {\n//                 similitude: true,\n//                 potentialClient: error.response.data.potentialClient,\n//                 similarClients: error.response.data.similarClients\n//             };\n//         }\n\n//         // Sinon, lancer une erreur standard\n//         throw new Error(error.response?.data?.error || 'Erreur lors de la création du client');\n//     }\n// };\n\nexport const createClient = async (clientData, maxRetries = 3) => {\n  let attempt = 0;\n  while (attempt < maxRetries) {\n    try {\n      const response = await api.post('/clients/create', clientData);\n\n      // Si la réponse contient des similitudes\n      if (response.data && response.data.similitude === true) {\n        return {\n          similitude: true,\n          potentialClient: response.data.potentialClient,\n          similarClients: response.data.similarClients\n        };\n      }\n\n      // Si pas de similitudes, retourner le client créé\n      return response.data;\n    } catch (error) {\n      var _error$response5, _error$response5$data, _error$response6, _error$response6$data;\n      attempt++;\n\n      // Si c'est une erreur de timeout ou de réseau et qu'il reste des tentatives\n      if ((error.code === 'ECONNABORTED' || error.message.includes('timeout')) && attempt < maxRetries) {\n        console.log(`Tentative ${attempt}/${maxRetries} échouée, nouvelle tentative dans 5 secondes...`);\n        await wait(5000);\n        continue;\n      }\n\n      // Si l'erreur contient des informations de similitude\n      if ((_error$response5 = error.response) !== null && _error$response5 !== void 0 && (_error$response5$data = _error$response5.data) !== null && _error$response5$data !== void 0 && _error$response5$data.similitude) {\n        return {\n          similitude: true,\n          potentialClient: error.response.data.potentialClient,\n          similarClients: error.response.data.similarClients\n        };\n      }\n\n      // Si c'est la dernière tentative ou une autre erreur\n      throw new Error(((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : (_error$response6$data = _error$response6.data) === null || _error$response6$data === void 0 ? void 0 : _error$response6$data.error) || 'Erreur lors de la création du client');\n    }\n  }\n};\nexport const updateClient = async (ubi, clientData) => {\n  try {\n    const response = await api.put(`/clients/${ubi}`, clientData);\n    return response.data;\n  } catch (error) {\n    var _error$response7, _error$response7$data;\n    throw new Error(((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : (_error$response7$data = _error$response7.data) === null || _error$response7$data === void 0 ? void 0 : _error$response7$data.error) || 'Erreur lors de la mise à jour du client');\n  }\n};\nexport const deactivateClient = async ubi => {\n  try {\n    const response = await api.delete(`/clients/${ubi}`);\n    return response.data;\n  } catch (error) {\n    var _error$response8, _error$response8$data;\n    throw new Error(((_error$response8 = error.response) === null || _error$response8 === void 0 ? void 0 : (_error$response8$data = _error$response8.data) === null || _error$response8$data === void 0 ? void 0 : _error$response8$data.error) || 'Erreur lors de la désactivation du client');\n  }\n};\nexport const activateClient = async ubi => {\n  try {\n    const response = await api.put(`/clients/${ubi}/activate`);\n    return response.data;\n  } catch (error) {\n    var _error$response9, _error$response9$data;\n    throw new Error(((_error$response9 = error.response) === null || _error$response9 === void 0 ? void 0 : (_error$response9$data = _error$response9.data) === null || _error$response9$data === void 0 ? void 0 : _error$response9$data.error) || 'Erreur lors de l\\'activation du client');\n  }\n};\nexport const getClientHistory = async ubi => {\n  try {\n    const response = await api.get(`/clients/${ubi}/history`);\n    return response.data;\n  } catch (error) {\n    var _error$response10, _error$response10$dat;\n    throw new Error(((_error$response10 = error.response) === null || _error$response10 === void 0 ? void 0 : (_error$response10$dat = _error$response10.data) === null || _error$response10$dat === void 0 ? void 0 : _error$response10$dat.error) || 'Erreur lors de la récupération de l\\'historique');\n  }\n};\nexport const addAccountToClient = async (ubi, accountData) => {\n  try {\n    const response = await api.post(`/clients/${ubi}/accounts`, accountData);\n    return response.data;\n  } catch (error) {\n    var _error$response11, _error$response11$dat;\n    throw new Error(((_error$response11 = error.response) === null || _error$response11 === void 0 ? void 0 : (_error$response11$dat = _error$response11.data) === null || _error$response11$dat === void 0 ? void 0 : _error$response11$dat.error) || 'Erreur lors de l\\'ajout du compte');\n  }\n};\nexport const removeAccount = async (ubi, accountNumber) => {\n  try {\n    const response = await api.delete(`/clients/${ubi}/accounts/${accountNumber}`);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\nexport const addNationality = async (ubi, nationalityData) => {\n  try {\n    const response = await api.post(`/clients/${ubi}/nationalities`, nationalityData);\n    return response.data;\n  } catch (error) {\n    var _error$response12, _error$response12$dat;\n    throw new Error(((_error$response12 = error.response) === null || _error$response12 === void 0 ? void 0 : (_error$response12$dat = _error$response12.data) === null || _error$response12$dat === void 0 ? void 0 : _error$response12$dat.error) || \"Erreur lors de l'ajout de la nationalité\");\n  }\n};\nexport const removeNationality = async (ubi, countryName) => {\n  try {\n    const response = await api.delete(`/clients/${ubi}/nationalities/${countryName}`);\n    return response.data;\n  } catch (error) {\n    var _error$response13, _error$response13$dat;\n    throw new Error(((_error$response13 = error.response) === null || _error$response13 === void 0 ? void 0 : (_error$response13$dat = _error$response13.data) === null || _error$response13$dat === void 0 ? void 0 : _error$response13$dat.error) || 'Erreur lors de la suppression de la nationalité');\n  }\n};\n\n// Fonctions utilitaires\nexport const logout = () => {\n  localStorage.removeItem('user');\n};\nexport const isAuthenticated = () => {\n  const user = localStorage.getItem('user');\n  return !!user;\n};\nexport const getCurrentUser = () => {\n  try {\n    const user = localStorage.getItem('user');\n    return user ? JSON.parse(user) : null;\n  } catch (error) {\n    return null;\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","API_AI_URL","compareImages","uploadedImage","clientImageUrl","clientImageResponse","fetch","clientImageBlob","blob","clientImageFile","File","type","formData","FormData","append","response","post","headers","data","error","console","Error","searchClientsByFace","clients","similarClients","log","client","imageFace","similarity","is_similar","UBI","push","length","sort","a","b","api","create","baseURL","interceptors","request","use","config","user","JSON","parse","localStorage","getItem","token","Authorization","login","credentials","_error$response","_error$response$data","getAllClients","get","_error$response2","_error$response2$data","getClient","ubi","_error$response3","_error$response3$data","getActiveClients","_error$response4","_error$response4$data","wait","ms","Promise","resolve","setTimeout","createClient","clientData","maxRetries","attempt","similitude","potentialClient","_error$response5","_error$response5$data","_error$response6","_error$response6$data","code","message","includes","updateClient","put","_error$response7","_error$response7$data","deactivateClient","delete","_error$response8","_error$response8$data","activateClient","_error$response9","_error$response9$data","getClientHistory","_error$response10","_error$response10$dat","addAccountToClient","accountData","_error$response11","_error$response11$dat","removeAccount","accountNumber","addNationality","nationalityData","_error$response12","_error$response12$dat","removeNationality","countryName","_error$response13","_error$response13$dat","logout","removeItem","isAuthenticated","getCurrentUser"],"sources":["/home/hlfuser/Bureau/HLF_project_jyen/bceao-blockchain-app-corisbank/frontend/src/services/api.js"],"sourcesContent":["// frontend/src/services/api.js\nimport axios from 'axios';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3000/api';\n\nconst API_AI_URL = 'http://0.0.0.0:5021/api/face-recognition';\n\n// Fonction pour comparer une image avec celle d'un client\nexport const compareImages = async (uploadedImage, clientImageUrl) => {\n    try {\n        // Convertir l'URL de l'image client en fichier\n        const clientImageResponse = await fetch(clientImageUrl);\n        const clientImageBlob = await clientImageResponse.blob();\n        const clientImageFile = new File([clientImageBlob], 'clientImage.jpg', { type: 'image/jpeg' });\n\n        const formData = new FormData();\n        formData.append('image1', uploadedImage);\n        formData.append('image2', clientImageFile);\n        \n        const response = await axios.post(API_AI_URL, formData, {\n            headers: {\n                'Content-Type': 'multipart/form-data',\n            }\n        });\n        \n        return response.data;\n    } catch (error) {\n        console.error('Erreur lors de la comparaison:', error);\n        throw new Error('Erreur lors de la comparaison des images');\n    }\n};\n\n// Fonction pour rechercher les clients similaires\nexport const searchClientsByFace = async (uploadedImage, clients) => {\n    try {\n        const similarClients = [];\n        console.log(\"Début de la recherche faciale...\");\n\n        // Parcourir tous les clients et comparer leurs images\n        for (const client of clients) {\n            if (client.imageFace) {\n                try {\n                    const { similarity, is_similar } = await compareImages(uploadedImage, client.imageFace);\n                    console.log(`Client ${client.UBI}:`, { similarity, is_similar });\n                    \n                    // N'ajouter le client que si is_similar est true\n                    if (is_similar === true) {  // Comparaison stricte\n                        similarClients.push({\n                            ...client,\n                            similarity: similarity\n                        });\n                        console.log(`Client ${client.UBI} ajouté avec similarité:`, similarity);\n                    } else {\n                        console.log(`Client ${client.UBI} non ajouté car non similaire`);\n                    }\n                } catch (error) {\n                    console.error(`Erreur lors de la comparaison avec le client ${client.UBI}:`, error);\n                    continue;\n                }\n            }\n        }\n\n        console.log(\"Clients similaires trouvés:\", similarClients.length);\n        \n        // Trier les clients par score de similarité décroissant\n        return similarClients.sort((a, b) => b.similarity - a.similarity);\n    } catch (error) {\n        console.error(\"Erreur globale lors de la recherche:\", error);\n        throw new Error('Erreur lors de la recherche des clients similaires');\n    }\n};\n\n\nconst api = axios.create({\n    baseURL: API_BASE_URL,\n    headers: {\n        'Content-Type': 'application/json'\n    }\n});\n\n// Intercepteur pour ajouter le token aux requêtes\napi.interceptors.request.use((config) => {\n    const user = JSON.parse(localStorage.getItem('user'));\n    if (user?.token) {\n        config.headers.Authorization = `Bearer ${user.token}`;\n    }\n    return config;\n});\n\n// Fonctions d'authentification\nexport const login = async (credentials) => {\n    try {\n        const response = await api.post('/auth/login', credentials);\n        return response.data;\n    } catch (error) {\n        throw new Error(error.response?.data?.error || 'Erreur de connexion');\n    }\n};\n\n// Fonctions de gestion des clients\nexport const getAllClients = async () => {\n    try {\n        const response = await api.get('/clients/all');\n        return response.data;\n    } catch (error) {\n        throw new Error(error.response?.data?.error || 'Erreur lors de la récupération des clients');\n    }\n};\n\nexport const getClient = async (ubi) => {\n    try {\n        const response = await api.get(`/clients/${ubi}`);\n        return response.data;\n    } catch (error) {\n        throw new Error(error.response?.data?.error || 'Erreur lors de la récupération du client');\n    }\n};\n\nexport const getActiveClients = async () => {\n    try {\n      const response = await api.get('/clients/active');\n      return response.data;\n    } catch (error) {\n      throw new Error(error.response?.data?.error || 'Erreur lors de la récupération des clients actifs');\n    }\n  };\n\n  const wait = (ms) => new Promise(resolve => setTimeout(resolve, ms));\n\n// export const createClient = async (clientData) => {\n//     try {\n//         const response = await api.post('/clients/create', clientData);\n        \n//         // Si la réponse contient des similitudes\n//         if (response.data && response.data.similitude === true) {\n//             return {\n//                 similitude: true,\n//                 potentialClient: response.data.potentialClient,\n//                 similarClients: response.data.similarClients\n//             };\n//         }\n\n//         // Si pas de similitudes, retourner le client créé\n//         return response.data;\n\n//     } catch (error) {\n//         // Si l'erreur contient des informations de similitude\n//         if (error.response?.data?.similitude) {\n//             return {\n//                 similitude: true,\n//                 potentialClient: error.response.data.potentialClient,\n//                 similarClients: error.response.data.similarClients\n//             };\n//         }\n\n//         // Sinon, lancer une erreur standard\n//         throw new Error(error.response?.data?.error || 'Erreur lors de la création du client');\n//     }\n// };\n\nexport const createClient = async (clientData, maxRetries = 3) => {\n    let attempt = 0;\n    \n    while (attempt < maxRetries) {\n        try {\n            const response = await api.post('/clients/create', clientData);\n            \n            // Si la réponse contient des similitudes\n            if (response.data && response.data.similitude === true) {\n                return {\n                    similitude: true,\n                    potentialClient: response.data.potentialClient,\n                    similarClients: response.data.similarClients\n                };\n            }\n            \n            // Si pas de similitudes, retourner le client créé\n            return response.data;\n            \n        } catch (error) {\n            attempt++;\n            \n            // Si c'est une erreur de timeout ou de réseau et qu'il reste des tentatives\n            if ((error.code === 'ECONNABORTED' || error.message.includes('timeout')) && attempt < maxRetries) {\n                console.log(`Tentative ${attempt}/${maxRetries} échouée, nouvelle tentative dans 5 secondes...`);\n                await wait(5000);\n                continue;\n            }\n            \n            // Si l'erreur contient des informations de similitude\n            if (error.response?.data?.similitude) {\n                return {\n                    similitude: true,\n                    potentialClient: error.response.data.potentialClient,\n                    similarClients: error.response.data.similarClients\n                };\n            }\n            \n            // Si c'est la dernière tentative ou une autre erreur\n            throw new Error(error.response?.data?.error || 'Erreur lors de la création du client');\n        }\n    }\n};\n\nexport const updateClient = async (ubi, clientData) => {\n    try {\n        const response = await api.put(`/clients/${ubi}`, clientData);\n        return response.data;\n    } catch (error) {\n        throw new Error(error.response?.data?.error || 'Erreur lors de la mise à jour du client');\n    }\n};\n\nexport const deactivateClient = async (ubi) => {\n    try {\n        const response = await api.delete(`/clients/${ubi}`);\n        return response.data;\n    } catch (error) {\n        throw new Error(error.response?.data?.error || 'Erreur lors de la désactivation du client');\n    }\n};\n\nexport const activateClient = async (ubi) => {\n    try {\n        const response = await api.put(`/clients/${ubi}/activate`);\n        return response.data;\n    } catch (error) {\n        throw new Error(error.response?.data?.error || 'Erreur lors de l\\'activation du client');\n    }\n};\n\nexport const getClientHistory = async (ubi) => {\n    try {\n        const response = await api.get(`/clients/${ubi}/history`);\n        return response.data;\n    } catch (error) {\n        throw new Error(error.response?.data?.error || 'Erreur lors de la récupération de l\\'historique');\n    }\n};\n\nexport const addAccountToClient = async (ubi, accountData) => {\n    try {\n        const response = await api.post(`/clients/${ubi}/accounts`, accountData);\n        return response.data;\n    } catch (error) {\n        throw new Error(error.response?.data?.error || 'Erreur lors de l\\'ajout du compte');\n    }\n};\n\nexport const removeAccount = async (ubi, accountNumber) => {\n    try {\n        const response = await api.delete(`/clients/${ubi}/accounts/${accountNumber}`);\n        return response.data;\n    } catch (error) {\n        throw error;\n    }\n};\n\nexport const addNationality = async (ubi, nationalityData) => {\n    try {\n        const response = await api.post(`/clients/${ubi}/nationalities`, nationalityData);\n        return response.data;\n    } catch (error) {\n        throw new Error(error.response?.data?.error || \"Erreur lors de l'ajout de la nationalité\");\n    }\n};\n\nexport const removeNationality = async (ubi, countryName) => {\n    try {\n        const response = await api.delete(`/clients/${ubi}/nationalities/${countryName}`);\n        return response.data;\n    } catch (error) {\n        throw new Error(error.response?.data?.error || 'Erreur lors de la suppression de la nationalité');\n    }\n};\n\n// Fonctions utilitaires\nexport const logout = () => {\n    localStorage.removeItem('user');\n};\n\nexport const isAuthenticated = () => {\n    const user = localStorage.getItem('user');\n    return !!user;\n};\n\nexport const getCurrentUser = () => {\n    try {\n        const user = localStorage.getItem('user');\n        return user ? JSON.parse(user) : null;\n    } catch (error) {\n        return null;\n    }\n};"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;AAEjF,MAAMC,UAAU,GAAG,0CAA0C;;AAE7D;AACA,OAAO,MAAMC,aAAa,GAAG,MAAAA,CAAOC,aAAa,EAAEC,cAAc,KAAK;EAClE,IAAI;IACA;IACA,MAAMC,mBAAmB,GAAG,MAAMC,KAAK,CAACF,cAAc,CAAC;IACvD,MAAMG,eAAe,GAAG,MAAMF,mBAAmB,CAACG,IAAI,CAAC,CAAC;IACxD,MAAMC,eAAe,GAAG,IAAIC,IAAI,CAAC,CAACH,eAAe,CAAC,EAAE,iBAAiB,EAAE;MAAEI,IAAI,EAAE;IAAa,CAAC,CAAC;IAE9F,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACE,MAAM,CAAC,QAAQ,EAAEX,aAAa,CAAC;IACxCS,QAAQ,CAACE,MAAM,CAAC,QAAQ,EAAEL,eAAe,CAAC;IAE1C,MAAMM,QAAQ,GAAG,MAAMnB,KAAK,CAACoB,IAAI,CAACf,UAAU,EAAEW,QAAQ,EAAE;MACpDK,OAAO,EAAE;QACL,cAAc,EAAE;MACpB;IACJ,CAAC,CAAC;IAEF,OAAOF,QAAQ,CAACG,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;IACtD,MAAM,IAAIE,KAAK,CAAC,0CAA0C,CAAC;EAC/D;AACJ,CAAC;;AAED;AACA,OAAO,MAAMC,mBAAmB,GAAG,MAAAA,CAAOnB,aAAa,EAAEoB,OAAO,KAAK;EACjE,IAAI;IACA,MAAMC,cAAc,GAAG,EAAE;IACzBJ,OAAO,CAACK,GAAG,CAAC,kCAAkC,CAAC;;IAE/C;IACA,KAAK,MAAMC,MAAM,IAAIH,OAAO,EAAE;MAC1B,IAAIG,MAAM,CAACC,SAAS,EAAE;QAClB,IAAI;UACA,MAAM;YAAEC,UAAU;YAAEC;UAAW,CAAC,GAAG,MAAM3B,aAAa,CAACC,aAAa,EAAEuB,MAAM,CAACC,SAAS,CAAC;UACvFP,OAAO,CAACK,GAAG,CAAC,UAAUC,MAAM,CAACI,GAAG,GAAG,EAAE;YAAEF,UAAU;YAAEC;UAAW,CAAC,CAAC;;UAEhE;UACA,IAAIA,UAAU,KAAK,IAAI,EAAE;YAAG;YACxBL,cAAc,CAACO,IAAI,CAAC;cAChB,GAAGL,MAAM;cACTE,UAAU,EAAEA;YAChB,CAAC,CAAC;YACFR,OAAO,CAACK,GAAG,CAAC,UAAUC,MAAM,CAACI,GAAG,0BAA0B,EAAEF,UAAU,CAAC;UAC3E,CAAC,MAAM;YACHR,OAAO,CAACK,GAAG,CAAC,UAAUC,MAAM,CAACI,GAAG,+BAA+B,CAAC;UACpE;QACJ,CAAC,CAAC,OAAOX,KAAK,EAAE;UACZC,OAAO,CAACD,KAAK,CAAC,gDAAgDO,MAAM,CAACI,GAAG,GAAG,EAAEX,KAAK,CAAC;UACnF;QACJ;MACJ;IACJ;IAEAC,OAAO,CAACK,GAAG,CAAC,6BAA6B,EAAED,cAAc,CAACQ,MAAM,CAAC;;IAEjE;IACA,OAAOR,cAAc,CAACS,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAACP,UAAU,GAAGM,CAAC,CAACN,UAAU,CAAC;EACrE,CAAC,CAAC,OAAOT,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;IAC5D,MAAM,IAAIE,KAAK,CAAC,oDAAoD,CAAC;EACzE;AACJ,CAAC;AAGD,MAAMe,GAAG,GAAGxC,KAAK,CAACyC,MAAM,CAAC;EACrBC,OAAO,EAAEzC,YAAY;EACrBoB,OAAO,EAAE;IACL,cAAc,EAAE;EACpB;AACJ,CAAC,CAAC;;AAEF;AACAmB,GAAG,CAACG,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAK;EACrC,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC;EACrD,IAAIJ,IAAI,aAAJA,IAAI,eAAJA,IAAI,CAAEK,KAAK,EAAE;IACbN,MAAM,CAACzB,OAAO,CAACgC,aAAa,GAAG,UAAUN,IAAI,CAACK,KAAK,EAAE;EACzD;EACA,OAAON,MAAM;AACjB,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMQ,KAAK,GAAG,MAAOC,WAAW,IAAK;EACxC,IAAI;IACA,MAAMpC,QAAQ,GAAG,MAAMqB,GAAG,CAACpB,IAAI,CAAC,aAAa,EAAEmC,WAAW,CAAC;IAC3D,OAAOpC,QAAQ,CAACG,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IAAA,IAAAiC,eAAA,EAAAC,oBAAA;IACZ,MAAM,IAAIhC,KAAK,CAAC,EAAA+B,eAAA,GAAAjC,KAAK,CAACJ,QAAQ,cAAAqC,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgBlC,IAAI,cAAAmC,oBAAA,uBAApBA,oBAAA,CAAsBlC,KAAK,KAAI,qBAAqB,CAAC;EACzE;AACJ,CAAC;;AAED;AACA,OAAO,MAAMmC,aAAa,GAAG,MAAAA,CAAA,KAAY;EACrC,IAAI;IACA,MAAMvC,QAAQ,GAAG,MAAMqB,GAAG,CAACmB,GAAG,CAAC,cAAc,CAAC;IAC9C,OAAOxC,QAAQ,CAACG,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IAAA,IAAAqC,gBAAA,EAAAC,qBAAA;IACZ,MAAM,IAAIpC,KAAK,CAAC,EAAAmC,gBAAA,GAAArC,KAAK,CAACJ,QAAQ,cAAAyC,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBtC,IAAI,cAAAuC,qBAAA,uBAApBA,qBAAA,CAAsBtC,KAAK,KAAI,4CAA4C,CAAC;EAChG;AACJ,CAAC;AAED,OAAO,MAAMuC,SAAS,GAAG,MAAOC,GAAG,IAAK;EACpC,IAAI;IACA,MAAM5C,QAAQ,GAAG,MAAMqB,GAAG,CAACmB,GAAG,CAAC,YAAYI,GAAG,EAAE,CAAC;IACjD,OAAO5C,QAAQ,CAACG,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IAAA,IAAAyC,gBAAA,EAAAC,qBAAA;IACZ,MAAM,IAAIxC,KAAK,CAAC,EAAAuC,gBAAA,GAAAzC,KAAK,CAACJ,QAAQ,cAAA6C,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgB1C,IAAI,cAAA2C,qBAAA,uBAApBA,qBAAA,CAAsB1C,KAAK,KAAI,0CAA0C,CAAC;EAC9F;AACJ,CAAC;AAED,OAAO,MAAM2C,gBAAgB,GAAG,MAAAA,CAAA,KAAY;EACxC,IAAI;IACF,MAAM/C,QAAQ,GAAG,MAAMqB,GAAG,CAACmB,GAAG,CAAC,iBAAiB,CAAC;IACjD,OAAOxC,QAAQ,CAACG,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IAAA,IAAA4C,gBAAA,EAAAC,qBAAA;IACd,MAAM,IAAI3C,KAAK,CAAC,EAAA0C,gBAAA,GAAA5C,KAAK,CAACJ,QAAQ,cAAAgD,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgB7C,IAAI,cAAA8C,qBAAA,uBAApBA,qBAAA,CAAsB7C,KAAK,KAAI,mDAAmD,CAAC;EACrG;AACF,CAAC;AAED,MAAM8C,IAAI,GAAIC,EAAE,IAAK,IAAIC,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAEF,EAAE,CAAC,CAAC;;AAEtE;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,OAAO,MAAMI,YAAY,GAAG,MAAAA,CAAOC,UAAU,EAAEC,UAAU,GAAG,CAAC,KAAK;EAC9D,IAAIC,OAAO,GAAG,CAAC;EAEf,OAAOA,OAAO,GAAGD,UAAU,EAAE;IACzB,IAAI;MACA,MAAMzD,QAAQ,GAAG,MAAMqB,GAAG,CAACpB,IAAI,CAAC,iBAAiB,EAAEuD,UAAU,CAAC;;MAE9D;MACA,IAAIxD,QAAQ,CAACG,IAAI,IAAIH,QAAQ,CAACG,IAAI,CAACwD,UAAU,KAAK,IAAI,EAAE;QACpD,OAAO;UACHA,UAAU,EAAE,IAAI;UAChBC,eAAe,EAAE5D,QAAQ,CAACG,IAAI,CAACyD,eAAe;UAC9CnD,cAAc,EAAET,QAAQ,CAACG,IAAI,CAACM;QAClC,CAAC;MACL;;MAEA;MACA,OAAOT,QAAQ,CAACG,IAAI;IAExB,CAAC,CAAC,OAAOC,KAAK,EAAE;MAAA,IAAAyD,gBAAA,EAAAC,qBAAA,EAAAC,gBAAA,EAAAC,qBAAA;MACZN,OAAO,EAAE;;MAET;MACA,IAAI,CAACtD,KAAK,CAAC6D,IAAI,KAAK,cAAc,IAAI7D,KAAK,CAAC8D,OAAO,CAACC,QAAQ,CAAC,SAAS,CAAC,KAAKT,OAAO,GAAGD,UAAU,EAAE;QAC9FpD,OAAO,CAACK,GAAG,CAAC,aAAagD,OAAO,IAAID,UAAU,iDAAiD,CAAC;QAChG,MAAMP,IAAI,CAAC,IAAI,CAAC;QAChB;MACJ;;MAEA;MACA,KAAAW,gBAAA,GAAIzD,KAAK,CAACJ,QAAQ,cAAA6D,gBAAA,gBAAAC,qBAAA,GAAdD,gBAAA,CAAgB1D,IAAI,cAAA2D,qBAAA,eAApBA,qBAAA,CAAsBH,UAAU,EAAE;QAClC,OAAO;UACHA,UAAU,EAAE,IAAI;UAChBC,eAAe,EAAExD,KAAK,CAACJ,QAAQ,CAACG,IAAI,CAACyD,eAAe;UACpDnD,cAAc,EAAEL,KAAK,CAACJ,QAAQ,CAACG,IAAI,CAACM;QACxC,CAAC;MACL;;MAEA;MACA,MAAM,IAAIH,KAAK,CAAC,EAAAyD,gBAAA,GAAA3D,KAAK,CAACJ,QAAQ,cAAA+D,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgB5D,IAAI,cAAA6D,qBAAA,uBAApBA,qBAAA,CAAsB5D,KAAK,KAAI,sCAAsC,CAAC;IAC1F;EACJ;AACJ,CAAC;AAED,OAAO,MAAMgE,YAAY,GAAG,MAAAA,CAAOxB,GAAG,EAAEY,UAAU,KAAK;EACnD,IAAI;IACA,MAAMxD,QAAQ,GAAG,MAAMqB,GAAG,CAACgD,GAAG,CAAC,YAAYzB,GAAG,EAAE,EAAEY,UAAU,CAAC;IAC7D,OAAOxD,QAAQ,CAACG,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IAAA,IAAAkE,gBAAA,EAAAC,qBAAA;IACZ,MAAM,IAAIjE,KAAK,CAAC,EAAAgE,gBAAA,GAAAlE,KAAK,CAACJ,QAAQ,cAAAsE,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBnE,IAAI,cAAAoE,qBAAA,uBAApBA,qBAAA,CAAsBnE,KAAK,KAAI,yCAAyC,CAAC;EAC7F;AACJ,CAAC;AAED,OAAO,MAAMoE,gBAAgB,GAAG,MAAO5B,GAAG,IAAK;EAC3C,IAAI;IACA,MAAM5C,QAAQ,GAAG,MAAMqB,GAAG,CAACoD,MAAM,CAAC,YAAY7B,GAAG,EAAE,CAAC;IACpD,OAAO5C,QAAQ,CAACG,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IAAA,IAAAsE,gBAAA,EAAAC,qBAAA;IACZ,MAAM,IAAIrE,KAAK,CAAC,EAAAoE,gBAAA,GAAAtE,KAAK,CAACJ,QAAQ,cAAA0E,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBvE,IAAI,cAAAwE,qBAAA,uBAApBA,qBAAA,CAAsBvE,KAAK,KAAI,2CAA2C,CAAC;EAC/F;AACJ,CAAC;AAED,OAAO,MAAMwE,cAAc,GAAG,MAAOhC,GAAG,IAAK;EACzC,IAAI;IACA,MAAM5C,QAAQ,GAAG,MAAMqB,GAAG,CAACgD,GAAG,CAAC,YAAYzB,GAAG,WAAW,CAAC;IAC1D,OAAO5C,QAAQ,CAACG,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IAAA,IAAAyE,gBAAA,EAAAC,qBAAA;IACZ,MAAM,IAAIxE,KAAK,CAAC,EAAAuE,gBAAA,GAAAzE,KAAK,CAACJ,QAAQ,cAAA6E,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgB1E,IAAI,cAAA2E,qBAAA,uBAApBA,qBAAA,CAAsB1E,KAAK,KAAI,wCAAwC,CAAC;EAC5F;AACJ,CAAC;AAED,OAAO,MAAM2E,gBAAgB,GAAG,MAAOnC,GAAG,IAAK;EAC3C,IAAI;IACA,MAAM5C,QAAQ,GAAG,MAAMqB,GAAG,CAACmB,GAAG,CAAC,YAAYI,GAAG,UAAU,CAAC;IACzD,OAAO5C,QAAQ,CAACG,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IAAA,IAAA4E,iBAAA,EAAAC,qBAAA;IACZ,MAAM,IAAI3E,KAAK,CAAC,EAAA0E,iBAAA,GAAA5E,KAAK,CAACJ,QAAQ,cAAAgF,iBAAA,wBAAAC,qBAAA,GAAdD,iBAAA,CAAgB7E,IAAI,cAAA8E,qBAAA,uBAApBA,qBAAA,CAAsB7E,KAAK,KAAI,iDAAiD,CAAC;EACrG;AACJ,CAAC;AAED,OAAO,MAAM8E,kBAAkB,GAAG,MAAAA,CAAOtC,GAAG,EAAEuC,WAAW,KAAK;EAC1D,IAAI;IACA,MAAMnF,QAAQ,GAAG,MAAMqB,GAAG,CAACpB,IAAI,CAAC,YAAY2C,GAAG,WAAW,EAAEuC,WAAW,CAAC;IACxE,OAAOnF,QAAQ,CAACG,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IAAA,IAAAgF,iBAAA,EAAAC,qBAAA;IACZ,MAAM,IAAI/E,KAAK,CAAC,EAAA8E,iBAAA,GAAAhF,KAAK,CAACJ,QAAQ,cAAAoF,iBAAA,wBAAAC,qBAAA,GAAdD,iBAAA,CAAgBjF,IAAI,cAAAkF,qBAAA,uBAApBA,qBAAA,CAAsBjF,KAAK,KAAI,mCAAmC,CAAC;EACvF;AACJ,CAAC;AAED,OAAO,MAAMkF,aAAa,GAAG,MAAAA,CAAO1C,GAAG,EAAE2C,aAAa,KAAK;EACvD,IAAI;IACA,MAAMvF,QAAQ,GAAG,MAAMqB,GAAG,CAACoD,MAAM,CAAC,YAAY7B,GAAG,aAAa2C,aAAa,EAAE,CAAC;IAC9E,OAAOvF,QAAQ,CAACG,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZ,MAAMA,KAAK;EACf;AACJ,CAAC;AAED,OAAO,MAAMoF,cAAc,GAAG,MAAAA,CAAO5C,GAAG,EAAE6C,eAAe,KAAK;EAC1D,IAAI;IACA,MAAMzF,QAAQ,GAAG,MAAMqB,GAAG,CAACpB,IAAI,CAAC,YAAY2C,GAAG,gBAAgB,EAAE6C,eAAe,CAAC;IACjF,OAAOzF,QAAQ,CAACG,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IAAA,IAAAsF,iBAAA,EAAAC,qBAAA;IACZ,MAAM,IAAIrF,KAAK,CAAC,EAAAoF,iBAAA,GAAAtF,KAAK,CAACJ,QAAQ,cAAA0F,iBAAA,wBAAAC,qBAAA,GAAdD,iBAAA,CAAgBvF,IAAI,cAAAwF,qBAAA,uBAApBA,qBAAA,CAAsBvF,KAAK,KAAI,0CAA0C,CAAC;EAC9F;AACJ,CAAC;AAED,OAAO,MAAMwF,iBAAiB,GAAG,MAAAA,CAAOhD,GAAG,EAAEiD,WAAW,KAAK;EACzD,IAAI;IACA,MAAM7F,QAAQ,GAAG,MAAMqB,GAAG,CAACoD,MAAM,CAAC,YAAY7B,GAAG,kBAAkBiD,WAAW,EAAE,CAAC;IACjF,OAAO7F,QAAQ,CAACG,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IAAA,IAAA0F,iBAAA,EAAAC,qBAAA;IACZ,MAAM,IAAIzF,KAAK,CAAC,EAAAwF,iBAAA,GAAA1F,KAAK,CAACJ,QAAQ,cAAA8F,iBAAA,wBAAAC,qBAAA,GAAdD,iBAAA,CAAgB3F,IAAI,cAAA4F,qBAAA,uBAApBA,qBAAA,CAAsB3F,KAAK,KAAI,iDAAiD,CAAC;EACrG;AACJ,CAAC;;AAED;AACA,OAAO,MAAM4F,MAAM,GAAGA,CAAA,KAAM;EACxBjE,YAAY,CAACkE,UAAU,CAAC,MAAM,CAAC;AACnC,CAAC;AAED,OAAO,MAAMC,eAAe,GAAGA,CAAA,KAAM;EACjC,MAAMtE,IAAI,GAAGG,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;EACzC,OAAO,CAAC,CAACJ,IAAI;AACjB,CAAC;AAED,OAAO,MAAMuE,cAAc,GAAGA,CAAA,KAAM;EAChC,IAAI;IACA,MAAMvE,IAAI,GAAGG,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;IACzC,OAAOJ,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACF,IAAI,CAAC,GAAG,IAAI;EACzC,CAAC,CAAC,OAAOxB,KAAK,EAAE;IACZ,OAAO,IAAI;EACf;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}